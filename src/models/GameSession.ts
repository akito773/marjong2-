import { GameManager } from './GameManager';
import { PlayerAction } from '../../shared/types/Player';
import { GameAction } from '../../shared/types/Game';

// „Ç≤„Éº„É†„Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜ„ÇØ„É©„Çπ
export class GameSessionManager {
  private static instance: GameSessionManager;
  private activeSessions: Map<string, GameManager> = new Map();

  private constructor() {}

  static getInstance(): GameSessionManager {
    if (!GameSessionManager.instance) {
      GameSessionManager.instance = new GameSessionManager();
    }
    return GameSessionManager.instance;
  }

  // Êñ∞„Åó„ÅÑ„Ç≤„Éº„É†„Çª„ÉÉ„Ç∑„Éß„É≥‰ΩúÊàê
  createGame(playerNames?: string[], gameId?: string): GameManager {
    const finalGameId = gameId || `game_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    // „Éá„Éï„Ç©„É´„Éà„Éó„É¨„Ç§„É§„ÉºÂêçÔºà„Éû„É´„ÉÅ„Éó„É¨„Ç§„É§„ÉºÁî®Ôºâ
    const defaultPlayerNames = playerNames || [
      '„Éó„É¨„Ç§„É§„Éº1', 'CPUÂçó', 'CPUË•ø', 'CPUÂåó'
    ];
    
    const gameManager = new GameManager(finalGameId, defaultPlayerNames);
    gameManager.startGame();
    
    this.activeSessions.set(finalGameId, gameManager);
    
    console.log(`üéÆ Êñ∞„Åó„ÅÑ„Ç≤„Éº„É†„Çª„ÉÉ„Ç∑„Éß„É≥‰ΩúÊàê: ${finalGameId}`);
    return gameManager;
  }

  // „Ç≤„Éº„É†„Çª„ÉÉ„Ç∑„Éß„É≥ÂèñÂæó
  getGame(gameId: string): GameManager | null {
    return this.activeSessions.get(gameId) || null;
  }

  // „Éó„É¨„Ç§„É§„Éº„Ç¢„ÇØ„Ç∑„Éß„É≥Âá¶ÁêÜ
  processPlayerAction(gameId: string, action: PlayerAction): {
    success: boolean;
    actions: GameAction[];
    message?: string;
    gameState?: any;
  } {
    const game = this.getGame(gameId);
    if (!game) {
      return {
        success: false,
        actions: [],
        message: `„Ç≤„Éº„É†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${gameId}`
      };
    }

    try {
      const actions = game.processAction(action);
      const gameState = game.getGameState();
      
      return {
        success: true,
        actions,
        gameState,
        message: `„Ç¢„ÇØ„Ç∑„Éß„É≥Âá¶ÁêÜÊàêÂäü: ${action.type}`
      };
    } catch (error) {
      return {
        success: false,
        actions: [],
        message: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // „Ç≤„Éº„É†Áä∂ÊÖãÂèñÂæó
  getGameState(gameId: string) {
    const game = this.getGame(gameId);
    if (!game) {
      return null;
    }
    return game.getGameState();
  }

  // „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±ÂèñÂæó
  getDebugInfo(gameId: string) {
    const game = this.getGame(gameId);
    if (!game) {
      return null;
    }
    return game.getDebugInfo();
  }

  // „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâË®≠ÂÆö
  setDebugMode(gameId: string, enabled: boolean): boolean {
    const game = this.getGame(gameId);
    if (!game) {
      return false;
    }
    game.setDebugMode(enabled);
    return true;
  }

  // ÊâãÂãï„ÉÑ„É¢Âá¶ÁêÜ
  processManualDraw(gameId: string, playerId: string): {
    success: boolean;
    tile?: any;
    message: string;
    gameState?: any;
  } {
    const game = this.getGame(gameId);
    if (!game) {
      return {
        success: false,
        message: `„Ç≤„Éº„É†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${gameId}`
      };
    }

    try {
      const result = game.manualDraw(playerId);
      const gameState = game.getGameState();
      
      return {
        ...result,
        gameState
      };
    } catch (error) {
      return {
        success: false,
        message: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // È≥¥„ÅçÊ©ü‰ºöÂèñÂæó
  getMeldOpportunities(gameId: string): {
    success: boolean;
    opportunities?: any[];
    message?: string;
  } {
    const game = this.getGame(gameId);
    if (!game) {
      return {
        success: false,
        message: `„Ç≤„Éº„É†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${gameId}`
      };
    }

    try {
      const opportunities = game.getMeldOpportunities();
      return {
        success: true,
        opportunities
      };
    } catch (error) {
      return {
        success: false,
        message: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // AIËá™ÂãïÂÆüË°å
  executeAI(gameId: string): {
    success: boolean;
    actions?: any[];
    gameState?: any;
    message?: string;
  } {
    const game = this.getGame(gameId);
    if (!game) {
      return {
        success: false,
        message: `„Ç≤„Éº„É†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${gameId}`
      };
    }

    try {
      const actions = game.executeAIAction();
      const gameState = game.getGameState();
      
      return {
        success: true,
        actions,
        gameState,
        message: actions.length > 0 ? 'AIË°åÂãïÂÆüË°å' : 'AIË°åÂãï„Å™„Åó'
      };
    } catch (error) {
      return {
        success: false,
        message: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™„Ç≤„Éº„É†‰∏ÄË¶ß
  getActiveGames(): string[] {
    return Array.from(this.activeSessions.keys());
  }

  // „Ç≤„Éº„É†„Çª„ÉÉ„Ç∑„Éß„É≥ÂâäÈô§
  removeGame(gameId: string): boolean {
    const removed = this.activeSessions.delete(gameId);
    if (removed) {
      console.log(`üóëÔ∏è „Ç≤„Éº„É†„Çª„ÉÉ„Ç∑„Éß„É≥ÂâäÈô§: ${gameId}`);
    }
    return removed;
  }

  // ÂÖ®„Çª„ÉÉ„Ç∑„Éß„É≥ÊÉÖÂ†±
  getAllSessionsInfo() {
    const sessions = Array.from(this.activeSessions.entries()).map(([gameId, game]) => ({
      gameId,
      phase: game.getGameState().phase,
      playerCount: game.getGameState().players.length,
      currentPlayer: game.getDebugInfo().currentPlayer,
      createdAt: game.getGameState().createdAt,
    }));

    return {
      totalSessions: this.activeSessions.size,
      sessions
    };
  }
}