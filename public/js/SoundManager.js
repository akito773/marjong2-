/**
 * È∫ªÈõÄ„Ç≤„Éº„É†Èü≥ÂäπÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†
 */
class SoundManager {
    constructor() {
        this.audioContext = null;
        this.sounds = new Map();
        this.volume = 0.7;
        this.muted = false;
        this.initialized = false;
        
        // Èü≥ÂäπË®≠ÂÆö
        this.soundConfig = {
            tilePlace: { frequency: 440, duration: 0.1, type: 'square' },
            tileSelect: { frequency: 660, duration: 0.05, type: 'sine' },
            chi: { frequency: 523, duration: 0.3, type: 'sawtooth' },
            pon: { frequency: 659, duration: 0.3, type: 'sawtooth' },
            kan: { frequency: 784, duration: 0.4, type: 'sawtooth' },
            riichi: { frequency: 880, duration: 0.5, type: 'triangle' },
            tsumo: { frequency: 1047, duration: 0.8, type: 'sine' },
            ron: { frequency: 1175, duration: 0.8, type: 'sine' },
            gameStart: { frequency: 523, duration: 1.0, type: 'triangle' },
            gameEnd: { frequency: 392, duration: 1.5, type: 'triangle' },
            notification: { frequency: 800, duration: 0.2, type: 'sine' },
            error: { frequency: 220, duration: 0.3, type: 'square' },
            success: { frequency: 1320, duration: 0.4, type: 'sine' },
            warning: { frequency: 740, duration: 0.3, type: 'triangle' }
        };
    }

    /**
     * Èü≥Âäπ„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ
     */
    async init() {
        if (this.initialized) return;

        try {
            // Web Audio APIÂàùÊúüÂåñ
            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
            
            // „É¶„Éº„Ç∂„Éº„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥Âæå„Å´„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„ÇíÂÜçÈñã
            if (this.audioContext.state === 'suspended') {
                await this.audioContext.resume();
            }

            this.initialized = true;
            console.log('üéµ Èü≥Âäπ„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÂÆå‰∫Ü');
        } catch (error) {
            console.error('üö´ Èü≥Âäπ„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÂ§±Êïó:', error);
        }
    }

    /**
     * Èü≥ÂäπÂÜçÁîü
     */
    playSound(soundType, customConfig = {}) {
        if (!this.initialized || this.muted || !this.audioContext) {
            return;
        }

        const config = { ...this.soundConfig[soundType], ...customConfig };
        if (!config) {
            console.warn(`Êú™Áü•„ÅÆÈü≥Âäπ„Çø„Ç§„Éó: ${soundType}`);
            return;
        }

        try {
            this.generateTone(config.frequency, config.duration, config.type);
        } catch (error) {
            console.error('Èü≥ÂäπÂÜçÁîü„Ç®„É©„Éº:', error);
        }
    }

    /**
     * „Éà„Éº„É≥ÁîüÊàê
     */
    generateTone(frequency, duration, type = 'sine') {
        if (!this.audioContext) {
            console.warn('AudioContext not initialized');
            return;
        }
        
        const oscillator = this.audioContext.createOscillator();
        const gainNode = this.audioContext.createGain();

        oscillator.connect(gainNode);
        gainNode.connect(this.audioContext.destination);

        oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);
        oscillator.type = type;

        // „Éú„É™„É•„Éº„É†„Ç®„É≥„Éô„É≠„Éº„Éó
        gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);
        gainNode.gain.linearRampToValueAtTime(this.volume * 0.3, this.audioContext.currentTime + 0.01);
        gainNode.gain.exponentialRampToValueAtTime(0.001, this.audioContext.currentTime + duration);

        oscillator.start(this.audioContext.currentTime);
        oscillator.stop(this.audioContext.currentTime + duration);
    }

    /**
     * Ë§áÂêàÈü≥ÂäπÔºàÂíåÈü≥Ôºâ
     */
    playChord(frequencies, duration = 0.5, type = 'sine') {
        if (!this.initialized || this.muted || !this.audioContext) return;

        frequencies.forEach((freq, index) => {
            setTimeout(() => {
                this.generateTone(freq, duration, type);
            }, index * 50);
        });
    }

    /**
     * ÁâπÂà•„Å™Èü≥Âäπ
     */
    playRiichi() {
        // „É™„Éº„ÉÅÈü≥Ôºö‰∏äÊòáÈü≥Èöé
        const frequencies = [440, 523, 659, 784];
        this.playChord(frequencies, 0.4, 'triangle');
    }

    playTsumo() {
        // „ÉÑ„É¢Èü≥ÔºöÂãùÂà©„ÅÆÂíåÈü≥
        const frequencies = [523, 659, 784, 1047];
        this.playChord(frequencies, 0.6, 'sine');
    }

    playRon() {
        // „É≠„É≥Èü≥ÔºöÊ±∫ÂÆöÁöÑ„Å™ÂíåÈü≥
        const frequencies = [659, 831, 1047, 1319];
        this.playChord(frequencies, 0.8, 'sine');
    }

    playGameStart() {
        // „Ç≤„Éº„É†ÈñãÂßãÔºöÂ∏åÊúõÁöÑ„Å™Èü≥Èöé
        const melody = [523, 587, 659, 784, 880];
        melody.forEach((freq, index) => {
            setTimeout(() => {
                this.generateTone(freq, 0.3, 'triangle');
            }, index * 200);
        });
    }

    playGameEnd() {
        // „Ç≤„Éº„É†ÁµÇ‰∫ÜÔºöÁµÇ‰∫Ü„ÅÆÈü≥Èöé
        const melody = [880, 784, 659, 587, 523];
        melody.forEach((freq, index) => {
            setTimeout(() => {
                this.generateTone(freq, 0.4, 'triangle');
            }, index * 250);
        });
    }

    playWin() {
        // ÂãùÂà©Èü≥ÔºöÁ•ùÁ¶è„ÅÆÊóãÂæã
        const melody = [523, 659, 784, 1047, 1319, 1047, 784, 659, 523];
        melody.forEach((freq, index) => {
            setTimeout(() => {
                this.generateTone(freq, 0.2, 'sine');
            }, index * 100);
        });
    }

    playLose() {
        // ÊïóÂåóÈü≥Ôºö‰∏ãÈôçÈü≥Èöé
        const melody = [440, 392, 349, 294];
        melody.forEach((freq, index) => {
            setTimeout(() => {
                this.generateTone(freq, 0.4, 'sawtooth');
            }, index * 200);
        });
    }

    /**
     * Áí∞Â¢ÉÈü≥
     */
    playAmbientClick() {
        this.playSound('tileSelect', { volume: 0.3 });
    }

    playHover() {
        this.generateTone(1200, 0.05, 'sine');
    }

    /**
     * „Éú„É™„É•„Éº„É†Âà∂Âæ°
     */
    setVolume(volume) {
        this.volume = Math.max(0, Math.min(1, volume));
    }

    getVolume() {
        return this.volume;
    }

    /**
     * „Éü„É•„Éº„ÉàÂà∂Âæ°
     */
    mute() {
        this.muted = true;
    }

    unmute() {
        this.muted = false;
    }

    toggleMute() {
        this.muted = !this.muted;
        return this.muted;
    }

    isMuted() {
        return this.muted;
    }

    /**
     * Èü≥Âäπ„ÉÜ„Çπ„Éà
     */
    testSound() {
        if (!this.initialized) {
            console.warn('Èü≥Âäπ„Ç∑„Çπ„ÉÜ„É†„ÅåÂàùÊúüÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
            return;
        }

        console.log('üéµ Èü≥Âäπ„ÉÜ„Çπ„ÉàÈñãÂßã');
        
        const testSequence = [
            { type: 'tileSelect', delay: 0 },
            { type: 'tilePlace', delay: 200 },
            { type: 'chi', delay: 400 },
            { type: 'pon', delay: 800 },
            { type: 'kan', delay: 1200 },
            { type: 'notification', delay: 1800 },
            { type: 'success', delay: 2200 }
        ];

        testSequence.forEach(({ type, delay }) => {
            setTimeout(() => {
                this.playSound(type);
                console.log(`‚ô™ ${type}`);
            }, delay);
        });

        setTimeout(() => {
            console.log('üéµ Èü≥Âäπ„ÉÜ„Çπ„ÉàÂÆå‰∫Ü');
        }, 3000);
    }

    /**
     * Ë®≠ÂÆö‰øùÂ≠ò„ÉªË™≠„ÅøËæº„Åø
     */
    saveSettings() {
        const settings = {
            volume: this.volume,
            muted: this.muted
        };
        localStorage.setItem('mahjong_sound_settings', JSON.stringify(settings));
    }

    loadSettings() {
        try {
            const saved = localStorage.getItem('mahjong_sound_settings');
            if (saved) {
                const settings = JSON.parse(saved);
                this.volume = settings.volume ?? 0.7;
                this.muted = settings.muted ?? false;
            }
        } catch (error) {
            console.warn('Èü≥ÂäπË®≠ÂÆöË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
        }
    }

    /**
     * „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
     */
    destroy() {
        if (this.audioContext && this.audioContext.state !== 'closed') {
            this.audioContext.close();
        }
        this.sounds.clear();
        this.initialized = false;
    }
}

// „Ç∞„É≠„Éº„Éê„É´„Ç§„É≥„Çπ„Çø„É≥„Çπ
const soundManager = new SoundManager();

// Ëá™ÂãïÂàùÊúüÂåñÔºà„É¶„Éº„Ç∂„Éº„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥ÂæåÔºâ
document.addEventListener('click', async () => {
    if (!soundManager.initialized) {
        await soundManager.init();
        soundManager.loadSettings();
    }
}, { once: true });

// „Ç≠„Éº„Éú„Éº„Éâ„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥ÂØæÂøú
document.addEventListener('keydown', async () => {
    if (!soundManager.initialized) {
        await soundManager.init();
        soundManager.loadSettings();
    }
}, { once: true });

// „Éö„Éº„Ç∏Èõ¢ËÑ±ÊôÇ„ÅÆË®≠ÂÆö‰øùÂ≠ò
window.addEventListener('beforeunload', () => {
    soundManager.saveSettings();
});

// „Ç®„ÇØ„Çπ„Éù„Éº„Éà
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SoundManager;
}